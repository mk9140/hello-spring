************회원 관리 예제 - 백엔드************

*비즈니스 요구사항 정리 -가장 간단한 경우의 예시-
-데이터	: 회원ID, 이름
-기능	: 회원등록, 조회
-DB		: 아직 DB가 선정되지 않은 경우를 상정


*일반적인 웹 어플리케이션 계층 구조
컨트롤러 --> 서비스 --> 리포지토리 --> DB
	|		  |			|
	-->		도메인	  <--

-컨트롤러	: 웹mvc의 컨트롤러 역할
-서비스		: 핵심 비즈니스 로직 구현
-리포지토리	: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리됨
-도메인		: 비즈니스 도메인 객체. 예)회원, 주문, 쿠폰 등 주로 DB에 저장하고 관리 됨


*클레스 의존관계

MemberService --> (interface)MemberRepository
									^
									|
							MemoryMemberRepository (구현체. 일단 메모리사용-> DB선정되면 교체)

-아직 DB가 선정되지 않았으므로 일단 인터페이스로 구현 클레스를 변경할 수 있도록 설계
-DB는 RDB, NoSQL 등등 있다
-개발을 진행하기 위해 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 DB사용


*테스트 케이스 작성
개발한 기능 실행해서 테스트 할 때 -> 자바의 main메서드 통해 실행하거나
웹 어플리케이션의 컨트롤러를 통해서 해당 기능 실행하게 되면
준비하고 실행하는데 오래걸림 + 반복적인 실행 어려움 + 여러 테스트 한 번에 실행하기 어려움
-->Junit이라는 테스트프레임워크로 테스트 실행해서 이러한 문제 해결


*스프링 빈(스프링이 관리하는 객체)을 등록하는 두 가지 방법!
-컴포넌트 스캔과 자동 의존관계 설정
-자바 코드로 직접 스프링 빈 등록하기

*컴포넌트 스캔과 자동 의존관계 설정
-@Component 애노테이션이 있으면 스프링 빈으로 자동등록됨
-@Controller 가 스프링 빈으로 자동 등록되는 이유도 컴보넌트 스캔 때문!
--@Controller, @Service, @Repository는 이미 @Component를 포함하고있음 -> 자동등록됨!
-아무곳(패키지)에서나 사용할 수 있는 것은 아님.
-기본적으로 @SpringBootApplication가 설정되어있는 클래스의 패키지와 동일하거나 그 하위 패키지에서만 동작함!

*참고
-스프링은 스프링빈 등록할 때, 기본적으로 "싱글톤"패턴으로 등록함
--설정으로 싱글톤이 아니게 할 수도 있긴한데, 특별한 경우 제외하면 대부분 싱글톤 사용
-싱글톤? 유일하게 하나만 등록해서, 이를 공유하는 패턴
-따라서, 같은 스프링빈 이면, 모두 같은 인스턴스!
-예를들면, HelloController의 인스턴스는 하나뿐! MemberController의 인스턴스는 하나뿐!

*자바 코드로 직접 스프링 빈 등록하기
-@Configuration  어노테이션 이 붙은 클래스 내부에서
-@Bean 어노태이션을 써서 직접 빈을 등록할 수 있다.
-실무에서는 컨트롤러, 서비스, 리포지토리 처럼 정형화된 코드는 컴포넌트 스캔방식 사용
-정형화되지 않은 경우나 상황에 따라 구현 클래스를 변경해야 하면
-@Configuration 과 @Bean으로 직접 등록해서 사용한다.
--> DB가 미정인 상황을 상정했으므로, 추후 MemberRepository인터페이스의 구현체인
--> MemoryMemberRepository를 바꿔야한다!
--> 이러한 경우에 @Configuration 붙은 클래스에서 구현체만 바꿔주면 다른 곳 손 볼 필요 없이 간단하게 가능
-주의! @Autowired를 통한 DI는 "빈으로 등록하지 않고" 내가 직접 생성한 객체에서는 동작하지 않는다! ()


*참고
-DI의 세 가지 방법
--필드 주입
--setter주입
--생성자 주입
-예제에서 진행한 방법은 생성자 주입 방법(요즘의 개발패턴)